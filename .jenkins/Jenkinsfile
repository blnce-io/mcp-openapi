pipeline {
    agent any
    options {
        buildDiscarder(logRotator(daysToKeepStr: "10"))
        timeout(time: 1, unit: 'HOURS')
        parallelsAlwaysFailFast()
    }
    environment {
        REPO_NAME = 'mcp-openapi'
        DOCKER_IMAGE_NAME = 'mcp-openapi'
        BRANCH_NAME = "${GIT_BRANCH.split('/').size() > 2 ? GIT_BRANCH.split('/')[1..-1].join('-') : GIT_BRANCH.split('/').join('-')}"
        ECR_REGISTRY = '223287545160.dkr.ecr.us-east-2.amazonaws.com'
        DOCKER_BUILDKIT = 1
        DOCKER_WORKDIR = '/usr/src/app'
        REGION = 'us-east-2'
        ECR_SECRET_ID = "ecr-login"
        GITHUB = credentials('devops-getbalance-github-repo-token')
        AWS_DEFAULT_REGION = "us-east-2"

    }
    stages {
        stage('Check agent machine type') {
            steps { script { getAgentInfo() } }
        }
        stage('Clone repository') {
            steps {
                script {
                    cancelPreviousBuilds()
                    deleteDir()
                    checkout scm
                }
            }
        }
        stage('Build Docker & Setup Test Env') {
            parallel {
                stage('Build Docker') {
                    steps {
                        script {
                            docker.withRegistry("https://${ECR_REGISTRY}", "ecr:${REGION}:${ECR_SECRET_ID}") {
                                dev = docker.build(
                                  "${DOCKER_IMAGE_NAME}:${BRANCH_NAME}-${env.BUILD_NUMBER}-dev",
                                  "--target=development\
                                   --build-arg docker_images_registry=${ECR_REGISTRY}\
                                   -f Dockerfile ."
                                )
                            }
                        }
                    }
                }
            }
        }
        stage('Tests') {
            parallel {
                stage('Lint') {
                    agent {
                        docker {
                            image "${DOCKER_IMAGE_NAME}:${BRANCH_NAME}-${env.BUILD_NUMBER}-dev"
                            reuseNode true
                        }
                    }
                    steps {
                        sh """
                            cd ${DOCKER_WORKDIR}
                            pnpm run lint
                        """
                    }
                }
                stage('Dead Code Detection') {
                    agent {
                        docker {
                            image "${DOCKER_IMAGE_NAME}:${BRANCH_NAME}-${env.BUILD_NUMBER}-dev"
                            reuseNode true
                        }
                    }
                    steps {
                        sh """
                            cd ${DOCKER_WORKDIR}
                            pnpm find-dead-code
                        """
                    }
                }
                stage('Formatter (Prettier)') {
                    agent {
                        docker {
                            image "${DOCKER_IMAGE_NAME}:${BRANCH_NAME}-${env.BUILD_NUMBER}-dev"
                            reuseNode true
                        }
                    }
                    steps {
                        sh """
                            cd ${DOCKER_WORKDIR}
                            pnpm run check-pretty
                        """
                    }
                }
                stage('Type check') {
                    agent {
                        docker {
                            image "${DOCKER_IMAGE_NAME}:${BRANCH_NAME}-${env.BUILD_NUMBER}-dev"
                            reuseNode true
                        }
                    }
                    steps {
                        sh """
                            cd ${DOCKER_WORKDIR}
                            pnpm type-check
                        """
                    }
                }
                stage('Dynamic tests') {
                    agent {
                        docker {
                            image "${DOCKER_IMAGE_NAME}:${BRANCH_NAME}-${env.BUILD_NUMBER}-dev"
                            reuseNode true
                        }
                    }
                    steps {
                        script {
                            sh """
                              cd ${DOCKER_WORKDIR}
                              pnpm test
                            """
                        }
                    }
                }
                stage('Build & Upload image to ECR') {
                    steps {
                        script {
                            if (env.BRANCH_NAME.startsWith('PR')) {
                                env.JIRA_TICKET = "${CHANGE_BRANCH.split('/')[0].toLowerCase()}"
                            }
                            else {
                                env.JIRA_TICKET = "${BRANCH_NAME.split('/')[0].toLowerCase()}"
                            }
                            docker.withRegistry("https://${ECR_REGISTRY}", "ecr:${REGION}:${ECR_SECRET_ID}") {
                                buildAndPushImageECR(flags="--target=production\
                                                            --build-arg docker_images_registry=${ECR_REGISTRY} \
                                                            --build-arg BUILD_VERSION=${env.JIRA_TICKET}\
                                                            -f Dockerfile",
                                                    img_name="${DOCKER_IMAGE_NAME}")
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                publishPRcommentE2E(repo_name="${REPO_NAME}")
            }
        }
        cleanup {
            cleanWs()
            cleanMachineIfFull()
        }
    }
}

def getAgentInfo() {
    sh """
        TOKEN=\$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
        echo
        curl --no-progress-meter -H "X-aws-ec2-metadata-token: \$TOKEN" http://169.254.169.254/latest/meta-data/instance-id
        echo
        curl --no-progress-meter -H "X-aws-ec2-metadata-token: \$TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4
        echo
        curl --no-progress-meter -H "X-aws-ec2-metadata-token: \$TOKEN" http://169.254.169.254/latest/meta-data/instance-type
    """
}
